/*QUESTION 1*/
DROP PROCEDURE IF EXISTS GET_LIST_ACCOUNT_OF_DEPARTMENT;
DELIMITER //
CREATE PROCEDURE GET_LIST_ACCOUNT_OF_DEPARTMENT (IN IN_DEPARTMENTNAME CHAR (50))
  BEGIN
	SELECT *
	FROM(
		SELECT 
			NV.ACCOUNTID AS ACCID,
			NV.EMAIL AS EMAIL,
			NV.USERNAME AS USERNAME,
			NV.FULLNAME AS FULLNAME,
			NV.POSITIONID AS POID,
			NV.CREATEDATE AS CREATEDATE,
			NV.DEPARTMENTID AS DEPARTMENTID,
			PB.DEPARTMENTNAME
		FROM `ACCOUNT` NV
		LEFT JOIN DEPARTMENT PB ON 
		(NV.DEPARTMENTID = PB.DEPARTMENTID))CV
	WHERE CV.DEPARTMENTNAME = IN_DEPARTMENTNAME;
  END//
DELIMITER ;
CALL GET_LIST_ACCOUNT_OF_DEPARTMENT('MARKETING');

/*QUESTION 2*/

DROP PROCEDURE IF EXISTS GET_LIST_ACCOUNT_OF_GROUP;
DELIMITER //
CREATE PROCEDURE GET_LIST_ACCOUNT_OF_GROUP ()
  BEGIN
	SELECT GR.GROUPID, GR.GROUPNAME, COUNT(GRAC.GROUPID) AS SO_ACCOUNT
	FROM  `GROUP` GR
	LEFT JOIN GROUPACCOUNT GRAC ON  
		GR.GROUPID = GRAC.GROUPID
	GROUP BY GR.GROUPID, GR.GROUPNAME
	ORDER BY GR.GROUPID;
  END//
DELIMITER ;
CALL GET_LIST_ACCOUNT_OF_GROUP();

/*QUESTION 3*/
DROP PROCEDURE IF EXISTS STATISTIC_TYPE_QUESTION;
DELIMITER //
CREATE PROCEDURE STATISTIC_TYPE_QUESTION ()
  BEGIN
	SELECT		TQ.TYPEID, TQ.TYPENAME, COUNT(Q.TYPEID) AS 'SO LUONG'
	FROM		TYPEQUESTION TQ
	LEFT JOIN 	QUESTION Q ON Q.TYPEID = TQ.TYPEID
	/*WHERE Q.CREATEDATE > "2021-06-30"*/
	GROUP BY	Q.TYPEID ;
 END//
DELIMITER ;
CALL STATISTIC_TYPE_QUESTION();

/*QUESTION 4*/
DROP PROCEDURE IF EXISTS GET_MAX_TYPE_QUESTION;
DELIMITER //
CREATE PROCEDURE GET_MAX_TYPE_QUESTION (OUT TYPE_ID INT)
  BEGIN
	SELECT 		T.TYPEID INTO TYPE_ID
	FROM		TYPEQUESTION T 
	INNER JOIN 	QUESTION Q ON	T.TYPEID = Q.TYPEID
	GROUP BY	Q.TYPEID
	HAVING		COUNT(Q.TYPEID) =	(SELECT 	MAX(COUNTT)
									 FROM		(SELECT 		COUNT(Q.TYPEID) AS COUNTT
												 FROM			TYPEQUESTION T
												 RIGHT JOIN  QUESTION Q ON T.TYPEID = Q.TYPEID
												 GROUP BY		Q.TYPEID) AS MAXCOUNTQ);
  END//
DELIMITER ;
CALL GET_MAX_TYPE_QUESTION(@IDMAX);
SELECT @IDMAX;

/*QUESTION 5*/
DROP PROCEDURE IF EXISTS GET_NAME_TYPE_QUESTION_MAX;
DELIMITER //
CREATE PROCEDURE GET_NAME_TYPE_QUESTION_MAX (IN ID_TYPE INT)
  BEGIN
	SELECT *
    FROM TYPEQUESTION
    WHERE TYPEID = 	ID_TYPE;
  END//
DELIMITER ;
CALL GET_NAME_TYPE_QUESTION_MAX(@IDMAX);


/*QUESTION 6*/
DROP PROCEDURE IF EXISTS GET_NAME_OR_GROUP;
DELIMITER //
CREATE PROCEDURE GET_NAME_OR_GROUP (IN INPUT_STR CHAR(50))
  BEGIN
		SELECT		GR.GROUPNAME AS "TÊN CẦN TÌM" /*GR.GROUPID, GR.GROUPNAME AS "NAME GR", GR.CREATEDATE*/
		FROM		`GROUP` GR
		WHERE		GR.GROUPNAME LIKE CONCAT("%",INPUT_STR,"%")
        UNION
        SELECT		ACC.FULLNAME /*ACC.ACCOUNTID, ACC.EMAIL, ACC.USERNAME, ACC.FULLNAME AS "NAME USER", ACC.ACCOUNTID, ACC.DEPARTMENTID, ACC.POSITIONID*/
		FROM		`ACCOUNT` ACC
		WHERE		ACC.FULLNAME LIKE CONCAT("%",INPUT_STR,"%");
  END//
DELIMITER ;
CALL GET_NAME_OR_GROUP("A");
		
/*QUESTION 7*/
DROP PROCEDURE IF EXISTS ADD_USER;
DELIMITER //
CREATE PROCEDURE ADD_USER (INOUT IO_FULLNAME VARCHAR(50),
						   INOUT IO_MAIL VARCHAR(50),
                           OUT USER_NAME VARCHAR(50),
                           OUT POS_ID INT,
                           OUT DEPT_ID INT)
  BEGIN
	SET USER_NAME = (SELECT SUBSTRING(IO_MAIL,1,PATINDEX('%_@%', IO_MAIL)-1));
    SET POS_ID = (SELECT  POSITIONID 
				  FROM POSITION 
                  WHERE POSITIONNAME = "DEV");
	SET DEPT_ID = (SELECT  DEPARTMENTID 
				  FROM DEPARTMENT 
                  WHERE DEPARTMENTNAME = "PHÒNG CHỜ");
  END//
DELIMITER ;
SET @FULLNAME = "YANG DEOK HWANG";
SET @MAIL = "YANG@GMAIL.COM";
SET @UN ="", @PID ="", @DID ="";
CALL ADD_USER(@FULLNAME, @MAIL ,@UN, @PID, @DID);
SELECT @FULLNAME AS FULLNAME;
SELECT @MAIL AS EMAIL;
SELECT @UN AS USERNAME;
SELECT @PID AS POSITIONID;
SELECT @DID AS DEPARTMENTID;

/*QUESTION 8*/
DROP PROCEDURE IF EXISTS GET_STATISTIC_CONTENT_DESC;
DELIMITER //
CREATE PROCEDURE GET_STATISTIC_CONTENT_DESC (IN IPTYPE VARCHAR(50))
  BEGIN
	DECLARE TYPE_ID INT DEFAULT(SELECT TQ.TYPEID
								FROM TYPEQUESTION TQ
                                WHERE TQ.TYPENAME = IPTYPE);
	SELECT *
    FROM QUESTION Q
    WHERE Q.TYPEID = TYPE_ID
	ORDER BY LENGTH(CONTENT) DESC ;
  END//
DELIMITER ;
CALL GET_STATISTIC_CONTENT_DESC("TRẮC NGHIỆM GIẢI THÍCH");

/*QUESTION 9*/
DROP PROCEDURE IF EXISTS DELETE_EXAM_BY_ID;
DELIMITER //
CREATE PROCEDURE DELETE_EXAM_BY_ID (IN INPUT_ID INT)
  BEGIN
	DECLARE SO_HANG INT DEFAULT 0;
	DELETE 
    FROM EXAM
    WHERE EXAMID = INPUT_ID;
    SET SO_HANG = (SELECT ROW_COUNT()) +1; /* CÓ 2 BẢNG CHỨA EXAMID NÊN ĐẾM + THÊM 1*/
    SELECT SO_HANG AS BAN_GHI_DA_XOA; /* CHƯA TỐI ƯU. CÓ THỂ IN RA SỐ BẢN GHI ĐÃ XÓA SAI NẾU NHƯ  KHÔNG XÓA BẢN GHI NÀO HOẶC XÓA BẢN GHI MÀ EXAMID KO CÓ TRONG EXAMQUESTION. EM CHƯA NGHĨ RA CÁCH TỐI ƯU HƠN NÊN ĐỂ TẠM THẾ NÀY*/
  END//
DELIMITER ;
CALL DELETE_EXAM_BY_ID('3');

/*QUESTION 10*/
DROP PROCEDURE IF EXISTS GET_EXAM_BY_3YEAR_AGO;
DELIMITER //
CREATE PROCEDURE GET_EXAM_BY_3YEAR_AGO (OUT ID_EXAM INT)
  BEGIN
	SELECT EXAMID INTO ID_EXAM
    FROM EXAM
    WHERE CREATEDATE < '2018-12-31'
    LIMIT 1;
  END//
DELIMITER ;
SET @IDEX = '';
CALL GET_EXAM_BY_3YEAR_AGO(@IDEX);
SELECT@IDEX;
CALL DELETE_EXAM_BY_ID(@IDEX);

/*QUESTION 11*/
DROP PROCEDURE IF EXISTS DELETE_DEPARTMENT;
DELIMITER //
CREATE PROCEDURE DELETE_DEPARTMENT (IN NAME_D VARCHAR(50))
  BEGIN
	DECLARE OLD_ID INT DEFAULT (SELECT DEPT.DEPARTMENTID 
								 FROM DEPARTMENT DEPT 
                                 WHERE DEPT.DEPARTMENTNAME = NAME_D);
	DECLARE NEW_ID INT DEFAULT (SELECT DEPT.DEPARTMENTID 
								FROM DEPARTMENT DEPT 
								WHERE DEPT.DEPARTMENTNAME = 'PHÒNG CHỜ');
        
	UPDATE	`ACCOUNT` AC
	SET		AC.DEPARTMENTID = NEW_ID
	WHERE	AC.DEPARTMENTID = OLD_ID;
        
	DELETE 	
	FROM	DEPARTMENT DEPT
	WHERE 	DEPT.DEPARTMENTID= OLD_ID;
  END//
DELIMITER ;
CALL DELETE_DEPARTMENT('HUMAN RESOURCES');


/*QUESTION 12*/
CREATE TABLE `MONTH`(
	`MONTHID` INT NOT NULL AUTO_INCREMENT,
    `MONTHNAME` VARCHAR(50) NOT NULL,
    PRIMARY KEY (`MONTHID`)
);
INSERT INTO `MONTH`(MONTHNAME) VALUES("THANG 1");
INSERT INTO `MONTH`(MONTHNAME) VALUES("THANG 2");
INSERT INTO `MONTH`(MONTHNAME) VALUES("THANG 3");
INSERT INTO `MONTH`(MONTHNAME) VALUES("THANG 4");
INSERT INTO `MONTH`(MONTHNAME) VALUES("THANG 5");
INSERT INTO `MONTH`(MONTHNAME) VALUES("THANG 6");
INSERT INTO `MONTH`(MONTHNAME) VALUES("THANG 7");
INSERT INTO `MONTH`(MONTHNAME) VALUES("THANG 8");
INSERT INTO `MONTH`(MONTHNAME) VALUES("THANG 9");
INSERT INTO `MONTH`(MONTHNAME) VALUES("THANG 10");
INSERT INTO `MONTH`(MONTHNAME) VALUES("THANG 11");
INSERT INTO `MONTH`(MONTHNAME) VALUES("THANG 12");
DROP PROCEDURE IF EXISTS GET_COUNT_QUES_BY_MONTH;
DELIMITER //
CREATE PROCEDURE GET_COUNT_QUES_BY_MONTH ()
  BEGIN
	SELECT MJ.MONTHNAME AS "MONTH", COUNT(MJ.MONTHID) AS "COUNT"
	FROM(
	SELECT M.MONTHID, M.MONTHNAME, COALESCE(Q.CREATEDATE, 0)
    FROM `MONTH` M
    LEFT JOIN `QUESTION`Q ON M.MONTHID = MONTH(Q.CREATEDATE)) MJ
    GROUP BY MJ.MONTHID
    ORDER BY MJ.MONTHID;
  END//
DELIMITER ;
CALL GET_COUNT_QUES_BY_MONTH();


/*
SELECT MONTH(Q.CREATEDATE) AS 'MONTH', COUNT(Q.QUESTIONID) AS 'COUNT1'
    FROM QUESTION Q
    WHERE Q.CREATEDATE > '2020-12-31'
    GROUP BY MONTH(Q.CREATEDATE)
    ORDER BY MONTH(Q.CREATEDATE);
    
SELECT M.MONTHID, M.MONTHNAME, COALESCE(Q.CREATEDATE, 0)
    FROM `MONTH` M
    LEFT JOIN `QUESTION`Q ON M.MONTHID = MONTH(Q.CREATEDATE)
    GROUP BY MONTH(Q.CREATEDATE)
    ORDER BY MONTH(Q.CREATEDATE);*/
    
    
    
/*QUESTION 13*/
DROP PROCEDURE IF EXISTS GET_COUNT_QUES_6MONTH;
DELIMITER //
CREATE PROCEDURE GET_COUNT_QUES_6MONTH ()
  BEGIN
	SELECT MONTH(Q.CREATEDATE) AS'MONTH' ,COUNT(Q.QUESTIONID) AS 'COUNT'
	FROM QUESTION Q
	WHERE Q.CREATEDATE > '2021-01-31'
	GROUP BY MONTH(Q.CREATEDATE)
	ORDER BY MONTH(Q.CREATEDATE);
  END//
DELIMITER ;
CALL GET_COUNT_QUES_6MONTH();